import concurrent.futures
import requests
from bs4 import BeautifulSoup
from colorama import Fore, Style
import os
import time

def clear_terminal():
    os.system('cls' if os.name == 'nt' else 'clear')

clear_terminal()
RE = Fore.YELLOW
print( RE + '''
      
      ███████ ██     ██ ██   ██ ██   ██  ██████  ███████ ███████ ██  ██████ ██  ██████  █      ███████ 
██      ██     ██ ██   ██  ██ ██  ██    ██ ██      ██      ██ ██      ██ ██   ██ ██         ███  
███████ ██  █  ██ ███████   ███   ██    ██ █████   █████   ██ ██      ██ ███████ ██        ███   
     ██ ██ ███ ██      ██  ██ ██  ██    ██ ██      ██      ██ ██      ██ ██   ██ ██       ███    
███████  ███ ███       ██ ██   ██  ██████  ██      ██      ██  ██████ ██ ██   ██ ███████ ███████ 
                                                                                                 
                                                                                                 
      
      ''')
# Hedef URL
site = input("(örn: https://example.com/category.php)  site url: ")
dork = input("(örn: ?catid=) xss-dork: ")
hedef_url= site
#terminal clear
clear_terminal()
# Payloadları txt dosyasından oku
with open("payloads.txt", "r", encoding="utf-8") as dosya:
    payloadlar = dosya.readlines()

# Zafiyetleri kaydedeceğimiz dosya
zafiyetler_dosyasi = open("zafiyetler.txt", "w", encoding="utf-8")

# Renk kodları
RENK_XSS_BULUNDU = Fore.BLUE
RENK_XSS_BULUNAMADI = Fore.RED

RENK_NORMAL = Fore.GREEN

def test_payload(payload):
    cevap = requests.get(hedef_url + dork + payload)
    soup = BeautifulSoup(cevap.text, "html.parser")

    if payload in soup.text:
        print(RENK_XSS_BULUNDU + "XSS Zafiyeti bulundu. Kötü niyetli kod:", payload + RENK_NORMAL)
        zafiyetler_dosyasi.write("XSS Zafiyeti bulundu. Kötü niyetli kod: {}\n".format(payload))
    else:
        print(RENK_XSS_BULUNAMADI + "XSS Zafiyeti bulunamadı. Payload:", payload + RENK_NORMAL)

# Her payload için test yapma
with concurrent.futures.ThreadPoolExecutor(max_workers=20) as executor:
    executor.map(test_payload, payloadlar)

zafiyetler_dosyasi.close()
print("Zafiyetler dosyaya kaydedildi: zafiyetler.txt")
